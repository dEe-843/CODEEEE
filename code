// Static IP

#include "lwip/netif.h"
#include "lwip/ip_addr.h"
#include "lwip/init.h"
#include "netif/ethernet.h"

struct netif my_netif;
ip_addr_t ipaddr, netmask, gw;

IP4_ADDR(&ipaddr, 192,168,1,123);   // <-- Your desired static IP
IP4_ADDR(&netmask, 255,255,255,0);
IP4_ADDR(&gw, 192,168,1,1);

netif_add(&my_netif, &ipaddr, &netmask, &gw, NULL, ethernetif_init, tcpip_input);
netif_set_default(&my_netif);
netif_set_up(&my_netif);


//DHCP IP

netif_add(&my_netif, IP_ADDR_ANY, IP_ADDR_ANY, IP_ADDR_ANY, NULL, ethernetif_init, tcpip_input);
netif_set_default(&my_netif);
netif_set_up(&my_netif);
dhcp_start(&my_netif);



printf("Assigned IP: %s\n", ip4addr_ntoa(&my_netif.ip_addr));


// Main.C

#include "lwip/init.h"
#include "lwip/netif.h"
#include "lwip/tcpip.h"
#include "netif/ethernet.h"
#include "ethernetif.h"
#include "lwip/ip_addr.h"
#include "lwip/timeouts.h"
#include "lwip/apps/httpd.h"
#include <stdio.h>

struct netif my_netif;

void network_init(void) {
    ip_addr_t ipaddr, netmask, gw;

    // Set a static IP address
    IP4_ADDR(&ipaddr, 192,168,1,123);
    IP4_ADDR(&netmask, 255,255,255,0);
    IP4_ADDR(&gw, 192,168,1,1);

    tcpip_init(NULL, NULL);

    netif_add(&my_netif, &ipaddr, &netmask, &gw, NULL, ethernetif_init, tcpip_input);
    netif_set_default(&my_netif);
    netif_set_up(&my_netif);

    printf("Network initialized with IP: %s\n", ip4addr_ntoa(&ipaddr));
}

int main(void) {
    // Initialize lwIP and network
    network_init();

    // Initialize the HTTP server with fsdata.c
    httpd_init();

    while (1) {
        // Handle lwIP timeouts and events
        sys_check_timeouts();
    }

    return 0;
}


//fsdata.h

#ifndef __FSDATA_H__
#define __FSDATA_H__

struct fsdata_file {
  const struct fsdata_file *next;
  const unsigned char *name;
  const unsigned char *data;
  int len;
};

#define FS_FILE_ALIGNMENT 1

#endif /* __FSDATA_H__ */


//fsdata.c
#include "fsdata.h"

const unsigned char data_index_html[] = {
  /* /index.html */
  0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x68,
  0x74, 0x6d, 0x6c, 0x00,
  0x3c, 0x68, 0x74, 0x6d, 0x6c, 0x3e,
  0x0a, 0x20, 0x20, 0x3c, 0x68, 0x65, 0x61, 0x64,
  0x3e, 0x3c, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x3e,
  0x50, 0x49, 0x43, 0x33, 0x32, 0x20, 0x57, 0x65,
  0x62, 0x20, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
  0x3c, 0x2f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x3e,
  0x3c, 0x2f, 0x68, 0x65, 0x61, 0x64, 0x3e,
  0x0a, 0x20, 0x20, 0x3c, 0x62, 0x6f, 0x64, 0x79,
  0x3e, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x3c, 0x68,
  0x31, 0x3e, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x20,
  0x66, 0x72, 0x6f, 0x6d, 0x20, 0x50, 0x49, 0x43,
  0x33, 0x32, 0x21, 0x3c, 0x2f, 0x68, 0x31, 0x3e,
  0x0a, 0x20, 0x20, 0x20, 0x20, 0x3c, 0x70, 0x3e,
  0x54, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20,
  0x61, 0x20, 0x74, 0x65, 0x73, 0x74, 0x20, 0x70,
  0x61, 0x67, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76,
  0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68,
  0x65, 0x20, 0x50, 0x49, 0x43, 0x33, 0x32, 0x20,
  0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x6c, 0x77,
  0x49, 0x50, 0x2e, 0x3c, 0x2f, 0x70, 0x3e,
  0x0a, 0x20, 0x20, 0x3c, 0x2f, 0x62, 0x6f, 0x64,
  0x79, 0x3e, 0x0a, 0x3c, 0x2f, 0x68, 0x74, 0x6d,
  0x6c, 0x3e
};

const struct fsdata_file file_index_html[] = {
  {
    NULL,
    data_index_html,
    data_index_html + 12,
    sizeof(data_index_html) - 12
  }
};

#define FS_ROOT file_index_html
#define FS_NUMFILES 1
